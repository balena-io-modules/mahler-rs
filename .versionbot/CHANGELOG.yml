- commits:
    - subject: Remove log crate conversion layer and simplify logging architecture
      hash: ecd11753b6d4aabb65320f0222f743dea24568fc
      body: |
        - Delete src/worker/logging.rs conversion layer (300 lines removed)
        - Replace conditional logging feature with direct tracing integration
        - Update examples and README to use tracing-subscriber directly
        - Add structured logging with span context and proper log levels
        - Remove logging feature flag and optional dependencies
        - Improve log message clarity and consistency

        This reduces complexity by eliminating the log crate intermediary
        while providing better structured logging capabilities.
      footer:
        Change-type: minor
        change-type: minor
      author: Felipe Lalanne
      nested: []
  version: 0.16.0
  title: ""
  date: 2025-06-24T17:55:20.079Z
- commits:
    - subject: Update metadata in Cargo.toml
      hash: ae8014ddcddf7a5b2e74242a159bc286c4636b61
      body: |
        The metadata is necessary to publish the module in crates.io
      footer:
        Change-type: patch
        change-type: patch
      author: Felipe Lalanne
      nested: []
  version: 0.15.2
  title: ""
  date: 2025-06-12T15:13:11.508Z
- commits:
    - subject: Remove flowzone build status from README
      hash: 79f2965c116330024cdd84451943b7eff99bb3da
      body: |
        This will always show `no status` since the `PR closed` event is always
        the last to run and that only performs changes when closing the PR
        without merging.
      footer:
        Change-type: patch
        change-type: patch
      author: Felipe Lalanne
      nested: []
  version: 0.15.1
  title: ""
  date: 2025-06-11T21:46:11.119Z
- commits:
    - subject: Add seek_with_interrupt method for user-controlled worker cancellation
      hash: 519ec0b784fc0584bc62a15cc8c28bb249926955
      body: >
        Adds seek_with_interrupt that accepts an Interrupt parameter for
        external

        cancellation. The existing seek_target method now delegates to this new
        method

        with a default interrupt, maintaining backward compatibility.


        When interrupted (either by user or worker drop), cancellation is
        properly

        propagated to running workflow tasks.
      footer:
        Change-type: minor
        change-type: minor
      author: Felipe Lalanne
      nested: []
    - subject: Make Interrupt struct public
      hash: b6cf117c4c5816acc6131f25cd918f0d7b1794ff
      body: |
        This interface already existed for internal usage, but this now makes it
        available extenrLly for use in the upcoming seek_with_interrupt Worker
        method.
      footer:
        Change-type: minor
        change-type: minor
      author: Felipe Lalanne
      nested: []
  version: 0.15.0
  title: ""
  date: 2025-06-11T20:27:17.046Z
- commits:
    - subject: Remove unused `stack_len` arg in Planner try_task
      hash: 106586472b58f7f3de5970117ea2a81576621134
      body: |
        This was leftover from some refactor and is not used anymore which was
        causing Clippy to throw an error.
      footer:
        Change-type: patch
        change-type: patch
      author: Felipe Lalanne
      nested: []
    - subject: Update README
      hash: b57f373c7c94603ebd4ad0fe038ee406b609ddf6
      body: |
        Adds documentation badges, fixes some typos and modifies a few texts for
        clarity.
      footer:
        Change-type: patch
        change-type: patch
      author: Felipe Lalanne
      nested: []
  version: 0.14.3
  title: ""
  date: 2025-06-06T18:01:59.926Z
- commits:
    - subject: Simplify Workflow type to wrap DAG only
      hash: 50736a4c2d06061c0bd82e0eb6ced469ad803732
      body: |
        Remove the pending field from Workflow since it was only used during
        planning. Workflow should just be about execution, not planning state.
      footer:
        Change-type: patch
        change-type: patch
      author: Felipe Lalanne
      nested: []
    - subject: Make planner candidate selection deterministic
      hash: 08b6f51dd112253851911bc96fb2c8f1af787970
      body: |
        Replace implicit ordering with explicit Candidate struct and sorting.
        This makes planning behavior predictable and easier to debug.

        - Add Candidate struct with clear fields
        - Remove 54 lines of complex domain logic
        - Sort candidates explicitly before applying changes
      footer:
        Change-type: patch
        change-type: patch
      author: Felipe Lalanne
      nested: []
    - subject: Reduce memory allocations in planner search
      hash: 2729a3070cc43184e9927466dd2bedbf5ba88b1c
      body: |
        Avoid cloning states early by using references in try_task and only
        cloning when needed. This reduces memory pressure during planning.
      footer:
        Change-type: patch
        change-type: patch
      author: Felipe Lalanne
      nested: []
  version: 0.14.2
  title: ""
  date: 2025-06-05T19:39:14.746Z
- commits:
    - subject: Update code documentation
      hash: a261c087395f323b03e290aea15e4c9c9b16ca81
      body: |
        Add rustdoc documentation to most of the public interfaces. This also
        renames a couple of methods for better clarity.
      footer:
        Change-type: patch
        change-type: patch
      author: Felipe Lalanne
      nested: []
    - subject: Unify `Ready` and `Idle` worker states
      hash: f5d5fd7397f4a9c67bbcdd0c91c33bcf6bbc3bd8
      body: >
        These were essentially equivalent states with the exception of a couple
        of fields.

        This change simplifies the code.
      footer:
        Change-type: patch
        change-type: patch
      author: Felipe Lalanne
      nested: []
    - subject: Remove redundant Pointer methods
      hash: 4890e0f007bf9e01bbe5e4d4fac4bd09b35ed0a2
      body: ""
      footer:
        Change-type: patch
        change-type: patch
      author: Felipe Lalanne
      nested: []
    - subject: Rename the library to mahler and update README
      hash: afc1f014af6c23efef360d49c0466078c7a26286
      body: ""
      footer:
        Change-type: patch
        change-type: patch
      author: Felipe Lalanne
      nested: []
  version: 0.14.1
  title: ""
  date: 2025-06-03T21:48:47.155Z
- commits:
    - subject: Prioritize method parallelism over automated parallelism
      hash: ae93688ec0e395fcc37e2d219ff13f2bbb907c7e
      body: |
        Parallel branching coming from methods should be selected over
        automatically detected parallelism.
      footer:
        Change-type: patch
        change-type: patch
      author: Felipe Lalanne
      nested: []
    - subject: Generate parallel workflows when expanding methods
      hash: 56ea676cfac44ff2d75e7b891632b89c85abc59d
      body: |
        A method returning scoped tasks for non-conflicting paths is
        parallelizable. This updates the planner to consider this scenario
      footer:
        Change-type: minor
        change-type: minor
      author: Felipe Lalanne
      nested: []
    - subject: Use parallel branches for non conflicting paths in planner
      hash: 83d784335e37f3e42e024f682d79b2f6495ae759
      body: ""
      footer:
        Change-type: minor
        change-type: minor
      author: Felipe Lalanne
      nested: []
    - subject: Create the plan front-to back
      hash: 29ed3c9dc4255bf67f6afb455ebab607fd232bc8
      body: |
        The planner was creating the plan in reverse order and reversing before
        returning. This was leftover from a previous implementation using
        recursion that took advantage of that plan contruction mechanism
      footer:
        Change-type: patch
        change-type: patch
      author: Felipe Lalanne
      nested: []
  version: 0.14.0
  title: ""
  date: 2025-05-19T21:07:11.024Z
- commits:
    - subject: Do not allow empty tasks in methods
      hash: dee594b0b2679f2abc148008187e2f758507d7b2
      body: |
        Atomic tasks should behave the same when selected individually or as
        part of a method.
      footer:
        Change-type: minor
        change-type: minor
      author: Felipe Lalanne
      nested: []
  version: 0.13.0
  title: ""
  date: 2025-05-10T15:43:58.306Z
- commits:
    - subject: Refactor error handling
      hash: 287fec90c2222ff6ea505f726a9e939cca35101f
      body: |
        This change organizes error types to distinguish errors that can happen
        at different stages of the worker lifecycle. This should make it easier
        for users to identify what caused a `Worker::seek()` operation to fail
      footer:
        Change-type: patch
        change-type: patch
      author: Felipe Lalanne
      nested: []
  version: 0.12.2
  title: ""
  date: 2025-04-29T03:05:11.769Z
- commits:
    - subject: Fix run-tests script
      hash: 8fd9a6c7092d247cb7d7dbe8cb0b7f31eec27793
      body: |
        Updates the script to exit on the first test failure
      footer:
        Change-type: patch
        change-type: patch
      author: Felipe Lalanne
      nested: []
  version: 0.12.1
  title: ""
  date: 2025-04-21T00:29:26.201Z
- commits:
    - subject: Move state type conversion to planner
      hash: 4ed3ad1d12ae2e1eeee90444739540db9995edd0
      body: |
        The planner needs to be aware of the target type, so it can properly
        compare the updated state with the target on each iteration of the
        search.

        This transformation was previously done on the Worker
      footer:
        Change-type: patch
        change-type: patch
      author: Felipe Lalanne
      nested: []
    - subject: Split worker input and output types
      hash: 48c340d9a103cd3f4b06c4b29ce676c0f4f69142
      body: |
        This allow to have fields that exist in the worker state that
        are not connsidered for state comparison purposes. Some examples of this
        are dynamically created ids, timestamps, etc.
      footer:
        Change-type: patch
        change-type: patch
      author: Felipe Lalanne
      nested: []
    - subject: Simplify Worker interface
      hash: c0f1774462ed439ecd5b2c02187c40066c084d25
      body: |
        Remove the wait and cancel methods, the `seek_target` call is now async
        and returns when the target has been reached or an error (recoverable or
        not) happens. The search is interrupted if the worker is dropped.

        This also drops re-try behavior. Users can implement their own backoff
        and retry behavior.
      footer:
        Change-type: patch
        change-type: patch
      author: Felipe Lalanne
      nested: []
    - subject: Create Interrupt abstraction
      hash: 301237667bbe07dffd27de3c87b929876a523a79
      body: |
        This makes the code easier to read. This commit also interrupts tasks
        if the interrupt signal is set
      footer:
        Change-type: minor
        change-type: minor
      author: Felipe Lalanne
      nested: []
    - subject: Move testing helper functions into Worker
      hash: c49796d0bb38daa272a3d5d81511c75e7dd45010
      body: >
        With the introduction of shared worker resources and the

        `Res`extractor, testing helpers like `test_task` (previously in the
        domain module) or

        `find_workflow` (previously in the planner module), no longer be

        trusted to succeed unless in the context of a `Worker` instance.


        This commit moves them under a `testing` module in worker that is

        exported if `debug_assertions` is set.
      footer:
        Change-type: patch
        change-type: patch
      author: Felipe Lalanne
      nested: []
    - subject: Add Resource support to the Worker
      hash: 8edacc55ae64984283e3bb48f156160ebca5e2a9
      body: |
        Resources are shared/read-only data that may not be serializable, but
        are necessary for Task execution. Example of this are database
        connections, sockets, filesystem handlers, etc.

        Resources can be accessed with the `Res` extractor
      footer:
        Change-type: minor
        change-type: minor
      author: Felipe Lalanne
      nested: []
  version: 0.12.0
  title: ""
  date: 2025-04-20T23:35:54.564Z
- commits:
    - subject: Add support for executing parallel workflows
      hash: 44e8df9483dda882a1d4fc40ee4c285071a0ed8e
      body: |
        Running DAGs now creates separate futures for graph branches that are
        joined later. This means that workflows with IO operations will run in
        parallel. Note that branches do not spawn new tokio tasks, so long
        running synchronous tasks (rather than I/O operations) may still result
        in inefficient execution of workflows.
      footer:
        Change-type: minor
        change-type: minor
      author: Felipe Lalanne
      nested: []
  version: 0.11.0
  title: ""
  date: 2025-04-11T03:17:29.046Z
- commits:
    - subject: Allow to follow a running worker progress
      hash: b733125827e9c2e78682e20f654e739d52fa2776
      body: |
        This adds a `follow()` method to Worker<T,Running>, this method returns
        a Stream with the changing state of the system.
      footer:
        Change-type: minor
        change-type: minor
      author: Felipe Lalanne
      nested: []
    - subject: Allow method tasks to return Option/Result
      hash: dfa270bcfa2efb2ab456be1c20f0a99c827f7d23
      body: ""
      footer:
        Change-type: patch
        change-type: patch
      author: Felipe Lalanne
      nested: []
    - subject: Use RwLock to synchronize reads/writes to system
      hash: 8e24a42a69e3e0ef0f5d886c4bc5f155420c97dd
      body: |
        This will be helpful when executing the DAG in parallel. This only a
        first version.
      footer:
        Change-type: patch
        change-type: patch
      author: Felipe Lalanne
      nested: []
    - subject: Allow to obtain the result from the Worker run
      hash: dd33511a84aafbfbdcd863f340e4830a3bfdcf87
      body: |
        Adds a new worker state (Idle) that can be queried to get the status
        of the previous run.
      footer:
        Change-type: minor
        change-type: minor
      author: Felipe Lalanne
      nested: []
    - subject: Improve Worker::wait function
      hash: e0cb30422ee4b2289c52312385fb3a0e977e29b7
      body: |
        The function now receives a `&mut self` as input to allow
        to wait multiple times for the worker
      footer:
        Change-type: minor
        change-type: minor
      author: Felipe Lalanne
      nested: []
    - subject: Simulate the task at runtime
      hash: 25f4959afaf34e2cee425e1eab11b50148c2c18b
      body: |
        This is a final check to ensure the conditions for running the task have
        not changed since what was expected during planning.
      footer:
        Change-type: patch
        change-type: patch
      author: Felipe Lalanne
      nested: []
    - subject: Add some convenience methods to task module
      hash: 14f36767e60c8f594018a643bbe3047e3d4f0d2f
      body: ""
      footer:
        Change-type: minor
        change-type: minor
      author: Felipe Lalanne
      nested: []
  version: 0.10.0
  title: ""
  date: 2025-04-10T14:45:56.879Z
- commits:
    - subject: Allow describing tasks
      hash: 475a0a3c3804b33f1d4a8434a5d3235d12bac884
      body: |
        The task description is an optional function that can be passed when
        constructing the domain/worker that will be use in logging to identify
        the task based on the context
      footer:
        Change-type: minor
        change-type: minor
      author: Felipe Lalanne
      nested: []
  version: 0.9.0
  title: ""
  date: 2025-04-06T01:25:15.139Z
- commits:
    - subject: Rename Intent to Job
      hash: 3be1b24d85983e2ad29a8a6a7c3065c77a7c3a3a
      body: |
        The name makes more sense now that the old Job definitions has been
        removed
      footer:
        Change-type: patch
        change-type: patch
      author: Felipe Lalanne
      nested: []
    - subject: Remove Job struct
      hash: 2f28b145a28065704a7399ccf4c1ac23ca866c15
      body: |
        The Job struct serves no purpose other than allow to build multiple
        tasks from a job, but this is not needed as task are cloneable.

        This removes the `boxed` module as well which added a lot of complexity
      footer:
        Change-type: patch
        change-type: patch
      author: Felipe Lalanne
      nested: []
  version: 0.8.1
  title: ""
  date: 2025-04-05T22:36:58.573Z
- commits:
    - subject: Enable tracing in worker and add `logging` feature
      hash: 9c8f41dc20cafec9932b48a01f26f02bac69e29f
      body: |
        The `logging` feature exposes an `init_logging` function on worker that
        registers a tracing subscriber that emits `log` crate human readable
        records. The crate requires importing the `tracing_subscriber` and
        `log` crates.
      footer:
        Change-type: minor
        change-type: minor
      author: Felipe Lalanne
      nested: []
  version: 0.8.0
  title: ""
  date: 2025-04-05T19:59:21.794Z
- commits:
    - subject: Remove Result type alias
      hash: 6c4e6cbf11b53064d8780935446425a266bbf0a4
      body: |
        The benefits of the alias do not outweight the drawbacks of having to
        use core::result::Result for std results
      footer:
        Change-type: patch
        change-type: patch
      author: Felipe Lalanne
      nested: []
  version: 0.7.1
  title: ""
  date: 2025-03-23T18:08:13.593Z
- commits:
    - subject: Replace System::from with a try_from function
      hash: 96c6b39bf955eec9d15ed6755a2aa22302e23b7d
      body: |
        This avoids panicking on an input that cannot be serialized.
      footer:
        Change-type: minor
        change-type: minor
      author: Felipe Lalanne
      nested: []
    - subject: Add Domain test_task method
      hash: 95d48b8da0297f61fd7e37c5a818d6c76532631b
      body: |
        This allows to run a task within the context of a domain for testing
      footer:
        Change-type: minor
        change-type: minor
      author: Felipe Lalanne
      nested: []
    - subject: Add `jobs` helper function to Domain
      hash: eca57df1594c51688b3845355eb0960f1ddf6b73
      body: ""
      footer:
        Change-type: minor
        change-type: minor
      author: Felipe Lalanne
      nested: []
    - subject: Simplify error handling for extractors
      hash: a23b6940372656b1b43b9b7348ca6a27a7ed7147
      body: |
        This introduces use of the `anyhow` module for simpler error handling
        and groups all extraction errors under `InputError`
      footer:
        Change-type: patch
        change-type: patch
      author: Felipe Lalanne
      nested: []
  version: 0.7.0
  title: ""
  date: 2025-03-21T19:41:51.550Z
- commits:
    - subject: Make implementation multi-threading compatible
      hash: 95d21b85ba4b12ea6c8de5f1ff1e395008e47c19
      body: |
        Refactor the codebase to ensure types are Send. This also removes the
        requirement for a LocalSet when calling `seek_target`
      footer:
        Change-type: minor
        change-type: minor
      author: Felipe Lalanne
      nested: []
  version: 0.6.0
  title: ""
  date: 2025-02-16T22:51:18.365Z
- commits:
    - subject: Rename Worker methods for readability
      hash: 6708fb238af343e07a69b826e44f261662fea9e8
      body: ""
      footer:
        Change-type: minor
        change-type: minor
      author: Felipe Lalanne
      nested: []
  version: 0.5.0
  title: ""
  date: 2025-02-14T18:53:50.044Z
- commits:
    - subject: Implement first version of the Worker
      hash: f81fc1d69efa071be3f6bf620cb59b252fac828e
      body: |
        This is a very basic version of the worker. It allows to seek a target
        searched via planning. This is very limited for now

        - it does not support parallelism in workflows
        - it does not support multi-threading in async calls (it requires a
          tokio::task::LocalSet to seek a new state).
        - it does not provide any mechanism to follow progress of the state
      footer:
        Change-type: minor
        change-type: minor
      author: Felipe Lalanne
      nested: []
  version: 0.4.0
  title: ""
  date: 2025-02-14T18:23:35.402Z
- commits:
    - subject: Rename Path extractor to Args
      hash: 661ff15ea95cfae384cb045639b03d137c92853f
      body: |
        This is to be more consistent with the `with_arg` context/task method.
      footer:
        Change-type: minor
        change-type: minor
      author: Felipe Lalanne
      nested: []
    - subject: Fix bug when adding args to Context
      hash: 2385d3133483ab46817ff654816c7d1708e14beb
      body: |
        The `with_arg` method in Context was additive, meaning repeated keys
        would be added independently of whether there was a value already. This
        caused a bug with the Path extractor. This update the PathArgs type with
        an `insert` method, that checks for a key before adding it.
      footer:
        Change-type: patch
        change-type: patch
      author: Felipe Lalanne
      nested: []
    - subject: Add System extractor
      hash: 6df9f4e1c3a35421f1fb0af888dd5750a523f504
      body: |
        The `System` extractor allow tasks to get read access to the global
        system state.
      footer:
        Change-type: minor
        change-type: minor
      author: Felipe Lalanne
      nested: []
    - subject: Introduce the concept of scoped extractors
      hash: 5e65156bce2d624413a101ad87503cbe969678f1
      body: |
        Refines the `FromSystem` trait, allowing implementors to define a type
        as non-scoped, indicating that it performs read-access to the global
        system state rather than a part of it indicated by the path linking the
        job on the domain.

        This also updates the handler and task definitions. An `is_scoped`
        function has been added to handler to indicate that the handler uses
        only scope extractors and is parallelizable.
      footer:
        Change-type: minor
        change-type: minor
      author: Felipe Lalanne
      nested: []
  version: 0.3.0
  title: ""
  date: 2025-02-11T21:39:22.326Z
- commits:
    - subject: Add planner support for compound tasks
      hash: ba99082a7b4ebc909b50323e8e3ad573a9f4e84b
      body: ""
      footer:
        Change-type: minor
        change-type: minor
      author: Felipe Lalanne
      nested: []
    - subject: Implement planner for atomic tasks
      hash: e85e62d5316e2ebfd27117d67f18e4cf28431167
      body: |
        First version of the planner
      footer:
        Change-type: minor
        change-type: minor
      author: Felipe Lalanne
      nested: []
    - subject: Create DAG data structure
      hash: 51f82ad32469d2a2e8da1709ed38f5fa55c21e25
      body: |
        This will be needed to produce executable workflows from the
        planner
      footer:
        Change-type: minor
        change-type: minor
      author: Felipe Lalanne
      nested: []
    - subject: Refactor and create worker target struct
      hash: 939fa5cc77bcee4696b6f4e02d0064503c85bb2d
      body: ""
      footer:
        Change-type: minor
        change-type: minor
      author: Felipe Lalanne
      nested: []
    - subject: Refactor error management
      hash: 09399156834bf67657727a5fb6f2eef769680533
      body: ""
      footer:
        Change-type: patch
        change-type: patch
      author: Felipe Lalanne
      nested: []
    - subject: Add Path extractor
      hash: a8b81ffe9514d1858ef2240431359e3d88df93e4
      body: |
        The extractor implementation is based on the [Axum path extractor](https://github.com/tokio-rs/axum/tree/main/axum/src/extract/path)
      footer:
        Change-type: minor
        change-type: minor
      author: Felipe Lalanne
      nested: []
    - subject: Move Context into task module
      hash: 56821120c99642b46b71d9e7ca1212445c899420
      body: ""
      footer:
        Change-type: patch
        change-type: patch
      author: Felipe Lalanne
      nested: []
    - subject: Add first implementation of Domain
      hash: 5625b692178b7b3de3f96eda0d7d026fbb924819
      body: |
        The domain defines what jobs are applicable for different routes in the
        state and to which operations.
      footer:
        Change-type: minor
        change-type: minor
      author: Felipe Lalanne
      nested: []
  version: 0.2.0
  title: ""
  date: 2025-01-30T19:59:07.249Z
- commits:
    - subject: Allow using array return on compound jobs
      hash: 939f0674c9f9558c89b3c743a5ab1c93a34f741e
      body: ""
      footer:
        Change-type: minor
        change-type: minor
      author: Felipe Lalanne
      nested: []
  version: 0.1.0
  title: ""
  date: 2024-10-29T19:58:22.418Z
- commits:
    - subject: Update README
      hash: 6adf021c3ab1f567ca7960a7fddf85e0594238cc
      body: |
        This adds additional information on how interacting the library will
        look like once more progress has been made
      footer:
        Change-type: patch
        change-type: patch
      author: Felipe Lalanne
      nested: []
  version: 0.0.4
  title: ""
  date: 2024-10-29T19:02:39.918Z
- commits:
    - subject: Add repo.yml
      hash: cdcd025814882e67729d07c357a516aa61938b30
      body: |
        This ensures that version is updated in Cargo.toml
      footer:
        Change-type: patch
        change-type: patch
      author: Felipe Lalanne
      nested: []
  version: 0.0.3
  title: ""
  date: 2024-10-25T23:52:00.202Z
- commits:
    - subject: Setup flowzone
      hash: 7da616430c9a509481f72074d36c46401d53b6a7
      body: ""
      footer:
        Change-type: patch
        change-type: patch
      author: Felipe Lalanne
  version: 0.0.2
  title: ""
  date: 2024-10-25T23:38:18.532Z
